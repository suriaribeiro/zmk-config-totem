/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&sk {
    release-after-ms = <750>;
    quick-release;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC>;
};

#define BASE_L  0
#define SYM_L   1
#define NUM_L   2
#define NAV_L   3

#define CUT   LG(X)
#define COPY  LG(C)
#define PASTE LG(V)
#define UNDO LG(Z)
#define REDO LG(Y)

/ {
    macros {
        ZMK_MACRO(scope, wait-ms = <30>; tap-ms = <30>; bindings = <&kp COLON &kp COLON>;)
        ZMK_MACRO(lambda, wait-ms = <30>; tap-ms = <30>; bindings = <&kp L &kp A &kp M &kp B &kp D &kp A>;)
    };

    combos {
        compatible = "zmk,combos";

        #define COMBO(NAME, BINDINGS, KEYPOS, TIMEOUT) \
              combo_##NAME { \
                timeout-ms = <TIMEOUT>; \
                bindings = <BINDINGS>; \
                key-positions = <KEYPOS>; \
              };

        /*                KEY POSITIONS

          ╭────────────────────╮ ╭────────────────────╮
          │  0   1   2   3   4 │ │  5   6   7   8   9 │
          │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
          │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
          ╰───────╮ 30  31  32 │ │ 33  34  35 ╭───────╯
                  ╰────────────╯ ╰────────────╯        */

        COMBO(caps_word, &caps_word, 4 5, 60) 
	COMBO(LEFT_PARENTHESIS, &kp LEFT_PARENTHESIS, 1 2, 60)
	COMBO(LEFT_BRACKET, &kp LEFT_BRACKET, 21 22, 60)
	COMBO(GRAVE, &kp GRAVE, 2 3, 60)
	COMBO(ESC, &kp C_MUTE, 22 23, 60)
	COMBO(APOSTROPHE, &kp APOSTROPHE, 6 7, 60)
	COMBO(BACKSLASH, &kp BACKSLASH, 26 27, 60)
	COMBO(RIGHT_PARENTHESIS, &kp RIGHT_PARENTHESIS, 7 8, 60) 
	COMBO(RIGHT_BRACKET, &kp RIGHT_BRACKET, 27 28, 60)
        COMBO(MINUS, &kp MINUS, 31 34, 60)
 	
    };

    behaviors {
        lhm: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            global-quick-tap-ms = <100>;
            bindings = <&kp>, <&kp>;
            // hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33 34 35>;
            hold-trigger-key-positions = <5 6 7 8 9 10 11 12 13 15 16 17 18 19 25 26 27 28 29 30 31 32 33 34 35>;
        };

        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp ESC>, <&to 2>, <&to 1>;
        };

        rhm: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            global-quick-tap-ms = <100>;
            bindings = <&kp>, <&kp>;
            // hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33 34 35>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 16 17 18 19 20 21 22 23 24 30 31 32 33 34 35>;
        };

        base_lt: base_layer_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "BASE_LAYER_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            global-quick-tap-ms = <100>;
            bindings = <&mo>, <&kp>;
        };

		rpt_lt: repeat_hold_tap {
		    compatible = "zmk,behavior-hold-tap";
            label = "REPEAT_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            global-quick-tap;
            bindings = <&mo>, <&key_repeat>;
        };
    };

	keymap {
		compatible = "zmk,keymap";

		base_layer {
			bindings = <
                   &kp Q        &kp W         &kp E              &kp R              &kp T              &kp Y              &kp U               &kp I                 &kp O         &kp P
                   &lhm LCTL A  &lhm LALT S   &lhm LGUI D       &lhm LSHFT F       &kp G              &kp H              &rhm RSHFT J        &rhm RGUI K          &rhm RALT L   &rhm RCTL SEMICOLON
                   &kp Z        &kp X         &kp C              &kp V              &kp B              &kp N              &kp M               &kp COMMA             &kp PERIOD       &kp SLASH
				 /*&            &*/           &td0 &base_lt NAV_L SPC &lhm F4 TAB &kp RET &base_lt NUM_L BSPC &base_lt SYM_L DEL /*&             &*/
			>;
		};

		sym_layer {
			bindings = <
                &kp ASTERISK	&kp AMPERSAND    	&kp SINGLE_QUOTE		&kp LEFT_BRACKET  		&kp RIGHT_BRACKET    &kp REDO	&kp PASTE      &kp COPY		&kp CUT        	&kp UNDO
		&kp COLON		&kp DOLLAR  	 	&kp PERCENT   		&kp CARET         		&kp EQUAL 	         &trans		&trans         &trans          	&trans    	&trans
                &kp TILDE  		&kp EXCLAMATION 	&kp AT_SIGN   		&kp HASH           		&kp PIPE        	 &trans    	&trans         &trans		&trans      	&trans
		/*&         		&*/			&to 0    &trans           &trans           &trans         &trans         &trans           /*&             &*/
			>;
		};

		num_layer {
			bindings = <
                   &kp LEFT_PARENTHESIS    &kp N7        &kp N8        &kp N9             &kp EQUAL           &kp REDO            &kp PASTE           &kp COPY                   &kp CUT        &kp UNDO
                   &kp RIGHT_PARENTHESIS      &kp N4        &kp N5        &kp N6             &kp APOSTROPHE          &trans            &sk RSHFT           &sk RCTL                   &sk RALT        &sk RGUI
                   &kp GRAVE    &kp N1        &kp N2        &kp N3             &kp BACKSLASH          &trans            &trans            &trans                    &trans         &trans 
				 /*&            &*/           &to 0        &kp N0             &trans            &trans                &trans           &trans                 /*&             &*/
			>;
		};

		nav_layer {
			bindings = <
                   &kp UNDO   &kp CUT      &kp COPY          &kp PASTE             &kp REDO      &bt BT_SEL 0          &bt BT_SEL 1       &bt BT_SEL 3                   &bt BT_SEL 4        &bt BT_CLR
                   &sk LGUI     &sk LALT      &sk LCTL     &sk LSHFT          &trans             &trans              &kp LEFT         &kp DOWN                 &kp UP        &kp RIGHT
                   &trans       &kp CUT       &kp COPY      &kp PASTE          &trans             &trans              &kp HOME         &kp K_PREV               &kp K_NEXT    &kp END
				 /*&            &*/           &trans        &trans             &trans             &trans              &trans           &trans             /*&             &*/
			>;
		};
	};
};
